#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GenericMapper.dbml
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BD_DATABASE_TESTS")]
	public partial class MusicDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAlbum(Album instance);
    partial void UpdateAlbum(Album instance);
    partial void DeleteAlbum(Album instance);
    partial void InsertArtista(Artista instance);
    partial void UpdateArtista(Artista instance);
    partial void DeleteArtista(Artista instance);
    partial void InsertAlbumArtista(AlbumArtista instance);
    partial void UpdateAlbumArtista(AlbumArtista instance);
    partial void DeleteAlbumArtista(AlbumArtista instance);
    #endregion
		
		public MusicDataContext() : 
				base(global::GenericMapper.Properties.Settings.Default.BD_DATABASE_TESTSConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public MusicDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Album> Albums
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<Artista> Artistas
		{
			get
			{
				return this.GetTable<Artista>();
			}
		}
		
		public System.Data.Linq.Table<AlbumArtista> AlbumArtistas
		{
			get
			{
				return this.GetTable<AlbumArtista>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Album")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private EntitySet<AlbumArtista> _AlbumArtistas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public Album()
		{
			this._AlbumArtistas = new EntitySet<AlbumArtista>(new Action<AlbumArtista>(this.attach_AlbumArtistas), new Action<AlbumArtista>(this.detach_AlbumArtistas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_AlbumArtista", Storage="_AlbumArtistas", ThisKey="Id", OtherKey="Album_Id")]
		public EntitySet<AlbumArtista> AlbumArtistas
		{
			get
			{
				return this._AlbumArtistas;
			}
			set
			{
				this._AlbumArtistas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlbumArtistas(AlbumArtista entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_AlbumArtistas(AlbumArtista entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artista")]
	public partial class Artista : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private EntitySet<AlbumArtista> _AlbumArtistas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public Artista()
		{
			this._AlbumArtistas = new EntitySet<AlbumArtista>(new Action<AlbumArtista>(this.attach_AlbumArtistas), new Action<AlbumArtista>(this.detach_AlbumArtistas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artista_AlbumArtista", Storage="_AlbumArtistas", ThisKey="Id", OtherKey="Artista_Id")]
		public EntitySet<AlbumArtista> AlbumArtistas
		{
			get
			{
				return this._AlbumArtistas;
			}
			set
			{
				this._AlbumArtistas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlbumArtistas(AlbumArtista entity)
		{
			this.SendPropertyChanging();
			entity.Artista = this;
		}
		
		private void detach_AlbumArtistas(AlbumArtista entity)
		{
			this.SendPropertyChanging();
			entity.Artista = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlbumArtista")]
	public partial class AlbumArtista : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Album_Id;
		
		private int _Artista_Id;
		
		private EntityRef<Album> _Album;
		
		private EntityRef<Artista> _Artista;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbum_IdChanging(int value);
    partial void OnAlbum_IdChanged();
    partial void OnArtista_IdChanging(int value);
    partial void OnArtista_IdChanged();
    #endregion
		
		public AlbumArtista()
		{
			this._Album = default(EntityRef<Album>);
			this._Artista = default(EntityRef<Artista>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Album_Id
		{
			get
			{
				return this._Album_Id;
			}
			set
			{
				if ((this._Album_Id != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbum_IdChanging(value);
					this.SendPropertyChanging();
					this._Album_Id = value;
					this.SendPropertyChanged("Album_Id");
					this.OnAlbum_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artista_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Artista_Id
		{
			get
			{
				return this._Artista_Id;
			}
			set
			{
				if ((this._Artista_Id != value))
				{
					if (this._Artista.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtista_IdChanging(value);
					this.SendPropertyChanging();
					this._Artista_Id = value;
					this.SendPropertyChanged("Artista_Id");
					this.OnArtista_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_AlbumArtista", Storage="_Album", ThisKey="Album_Id", OtherKey="Id", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.AlbumArtistas.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.AlbumArtistas.Add(this);
						this._Album_Id = value.Id;
					}
					else
					{
						this._Album_Id = default(int);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artista_AlbumArtista", Storage="_Artista", ThisKey="Artista_Id", OtherKey="Id", IsForeignKey=true)]
		public Artista Artista
		{
			get
			{
				return this._Artista.Entity;
			}
			set
			{
				Artista previousValue = this._Artista.Entity;
				if (((previousValue != value) 
							|| (this._Artista.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artista.Entity = null;
						previousValue.AlbumArtistas.Remove(this);
					}
					this._Artista.Entity = value;
					if ((value != null))
					{
						value.AlbumArtistas.Add(this);
						this._Artista_Id = value.Id;
					}
					else
					{
						this._Artista_Id = default(int);
					}
					this.SendPropertyChanged("Artista");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
